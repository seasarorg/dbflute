##
## Copyright 2004-2014 the Seasar Foundation and the Others.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${database.allClassCopyright}package ${myBaseEntityPackageName};
#set ($myClassName = "${myBaseObjectClassName}")

#if ($table.hasReferrerAsMany())
import java.util.List;
#if ($database.isSuppressPublicField())
import java.util.ArrayList;
#end
#end
import java.io.Serializable;
import javax.persistence.*;

#if ($table.hasRelation())
import ${myExtendedEntityPackageName}.*;
#end

/**
 * The entity of ${table.basicInfoDispString}. <br>
#if ($table.isCommentForJavaDocValid())
 * ${table.commentForJavaDoc}
#end
 * <pre>
 * [primary-key]
 *     ${table.primaryKeyNameCommaString}
 * 
 * [column]
 *     ${table.columnNameCommaString}
 * 
 * [sequence]
 *     ${table.definedSequenceName}
 * 
 * [identity]
 *     ${table.identityColumnName}
 * 
 * [version-no]
 *     ${table.versionNoColumnName}
 * 
 * [foreign-table]
 *     ${table.foreignTableNameCommaString}
 * 
 * [referrer-table]
 *     ${table.referrerTableNameCommaString}
 * 
 * [foreign-property]
 *     ${table.foreignPropertyNameCommaString}
 * 
 * [referrer-property]
 *     ${table.referrerPropertyNameCommaString}
 * </pre>
 * @author ${database.classAuthor}
 */
@MappedSuperclass
public abstract class ${myClassName} implements Serializable {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    /** Serial version UID. (Default) */
    private static final long serialVersionUID = 1L;

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
#foreach ($col in $table.columns)
#if ($database.isSuppressPublicField())
    /** ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} */
#else
    /**
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br>
#if ($col.isCommentForJavaDocValid())
     * ${col.commentForJavaDoc}
#end
     */
#end
#if ($col.isPrimaryKey())
    @Id
#end
#if ($col.isIdentity())
    @GeneratedValue(strategy = GenerationType.IDENTITY)
#end
#if ($col.isJdbcTypeDate())
    @Temporal(javax.persistence.TemporalType.DATE)
#end
#if ($col.isJdbcTypeTime())
    @Temporal(javax.persistence.TemporalType.TIME)
#end
#if ($col.isJdbcTypeTimestamp())
    @Temporal(javax.persistence.TemporalType.TIMESTAMP)
#end
#if ($col.isJdbcTypeBlob() && $col.isJdbcTypeClob())
    @Lob
#end
#if ($table.isUseVersionNo() && $col.isVersionNo())
    @Version
#end
#if ($database.isSuppressPublicField())
    protected ${col.javaNative} _${col.uncapitalisedJavaName};
#else
    public ${col.javaNative} ${col.uncapitalisedJavaName};
#end

#end
    // ===================================================================================
    //                                                                       Foreign Table
    //                                                                       =============
#foreach ($fk in $table.foreignKeys)
#set ($foreignTable = $fk.foreignTable)
#set ($foreignEntityClassName = "${fk.foreignTableExtendedEntityClassName}")
#set ($foreignVariableName = "_${fk.foreignPropertyName}")
#if ($database.isSuppressPublicField())
    /** ${fk.foreignSimpleDisp}. */
    protected ${foreignEntityClassName} ${foreignVariableName};

    /**
     * ${fk.foreignDispForJavaDoc}
     * @return The entity of foreign property '${fk.foreignJavaBeansRulePropertyName}'. (NullAllowed: If the foreign key does not have 'NotNull' constraint, please check null.)
     */
    @ManyToOne
#if ($fk.isSimpleKeyFK())
    @JoinColumn(name="${fk.localColumnNameAsOne}")
#end
    public ${foreignEntityClassName} get${fk.foreignJavaBeansRulePropertyNameInitCap}() {
        return ${foreignVariableName};
    }

    /**
     * ${fk.foreignDispForJavaDoc}
     * @param ${fk.foreignPropertyName} The entity of foreign property '${fk.foreignJavaBeansRulePropertyName}'. (NullAllowed)
     */
    public void set${fk.foreignJavaBeansRulePropertyNameInitCap}(${foreignEntityClassName} ${fk.foreignPropertyName}) {
        ${foreignVariableName} = ${fk.foreignPropertyName};
    }

#else
    /**
     * ${fk.foreignDispForJavaDoc}
     */
    @ManyToOne
#if ($fk.isSimpleKeyFK())
    @JoinColumn(name="${fk.localColumnNameAsOne}")
#end
    public ${foreignEntityClassName} ${fk.foreignPropertyName};

#end
#end
#foreach ($referrer in $table.referrerAsOneList)
#set ($referrerTable = $referrer.table)
#set ($referrerEntityClassName = "${referrer.referrerTableExtendedEntityClassName}")
#set ($referrerVariableName = "_${referrer.referrerPropertyNameAsOne}")
#if ($database.isSuppressPublicField())
    /** ${referrer.referrerSimpleDispAsOne}. */
    protected ${referrerEntityClassName} ${referrerVariableName};

    /**
     * ${referrer.referrerDispAsOneForJavaDoc}
     * @return the entity of foreign property(referrer-as-one) '${referrer.referrerJavaBeansRulePropertyNameAsOne}'. (NullAllowed: If the foreign key does not have 'NotNull' constraint, please check null.)
     */
    @OneToOne(mappedBy = "${referrer.foreignPropertyName}")
    public ${referrerEntityClassName} get${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}() {
        return ${referrerVariableName};
    }

    /**
     * ${referrer.referrerDispAsOneForJavaDoc}
     * @param ${referrer.referrerJavaBeansRulePropertyNameAsOne} The entity of foreign property(referrer-as-one) '${referrer.referrerJavaBeansRulePropertyNameAsOne}'. (NullAllowed)
     */
    public void set${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}(${referrerEntityClassName} ${referrer.referrerJavaBeansRulePropertyNameAsOne}) {
        ${referrerVariableName} = ${referrer.referrerJavaBeansRulePropertyNameAsOne};
    }

#else
    /**
     * ${referrer.referrerDispAsOneForJavaDoc}
     */
    @OneToOne(mappedBy = "${referrer.foreignPropertyName}")
    public ${referrerEntityClassName} ${referrer.referrerPropertyNameAsOneS2Jdbc};

#end
#end
    // ===================================================================================
    //                                                                      Referrer Table
    //                                                                      ==============
#foreach ($referrer in $table.referrerAsManyList)
#set ($referrerTable = $referrer.table)
#set ($referrerEntityClassName = "${referrer.referrerTableExtendedEntityClassName}")
#set ($referrerVariableName = "_${referrer.referrerPropertyName}")
#if ($database.isSuppressPublicField())
    /** ${referrer.referrerSimpleDisp}. */
    protected List<${referrerEntityClassName}> $referrerVariableName;

    /**
     * ${referrer.referrerDispForJavaDoc}
     * @return The entity list of referrer property '${referrer.referrerJavaBeansRulePropertyName}'. (NotNull: If it's not loaded yet, initializes the list instance of referrer as empty and returns it.)
     */
    @OneToMany(mappedBy = "${referrer.foreignPropertyName}")
    public List<${referrerEntityClassName}> get${referrer.referrerJavaBeansRulePropertyNameInitCap}() {
        if (${referrerVariableName} == null) { ${referrerVariableName} = new ArrayList<${referrerEntityClassName}>(); }
        return ${referrerVariableName};
    }

    /**
     * ${referrer.referrerDispForJavaDoc}
     * @param ${referrer.referrerPropertyName} The entity list of referrer property '${referrer.referrerJavaBeansRulePropertyName}'. (NullAllowed)
     */
    public void set${referrer.referrerJavaBeansRulePropertyNameInitCap}(List<${referrerEntityClassName}> ${referrer.referrerPropertyName}) {
        ${referrerVariableName} = ${referrer.referrerPropertyName};
    }

#else
    /**
     * ${referrer.referrerDispForJavaDoc}
     */
    @OneToMany(mappedBy = "${referrer.foreignPropertyName}")
    public List<${referrerEntityClassName}> ${referrer.referrerPropertyName};

#end
#end
    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
#if ($table.hasPrimaryKey())
    /**
     * If the primary-key of the other is same as this one, returns true.
     * @param other Other entity.
     * @return Comparing result.
     */
    public boolean equals(Object other) {
        if (other == null || !(other instanceof $myClassName)) { return false; }
        $myClassName otherEntity = ($myClassName)other;
#foreach ($col in $table.primaryKey)
#if ($database.isSuppressPublicField())
        if (!helpComparingValue(get${col.javaName}(), otherEntity.get${col.javaName}())) { return false; }
#else
        if (!helpComparingValue(${col.uncapitalisedJavaName}, otherEntity.${col.uncapitalisedJavaName})) { return false; }
#end
#end
        return true;
    }

    protected boolean helpComparingValue(Object value1, Object value2) {
        if (value1 == null && value2 == null) { return true; }
        return value1 != null && value2 != null && value1.equals(value2);
    }

    /**
     * Calculates hash-code from primary-key.
     * @return Hash-code from primary-key.
     */
    public int hashCode() {
        int result = 17;
#foreach ($col in $table.primaryKey)
#if ($database.isSuppressPublicField())
        if (get${col.javaName}() != null) { result = (31*result) + get${col.javaName}().hashCode(); }
#else
        if (${col.uncapitalisedJavaName} != null) { result = (31*result) + ${col.uncapitalisedJavaName}.hashCode(); }
#end
#end
        return result;
    }
#end

    /**
     * @return The view string of all columns. (NotNull)
     */
    public String toString() {
        String delimiter = ",";
        StringBuilder sb = new StringBuilder();
#foreach ($col in $table.columns)
#if ($database.isSuppressPublicField())
        sb.append(delimiter).append(get${col.javaName}());
#else
        sb.append(delimiter).append(${col.uncapitalisedJavaName});
#end
#end
        if (sb.length() > 0) { sb.delete(0, delimiter.length()); }
        sb.insert(0, "{").append("}");
        return sb.toString();
    }
#if ($database.isSuppressPublicField())

#set ($propertyLoopIndex = 0)
#foreach ($col in $table.columns)
#if ($propertyLoopIndex == 0)
    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
#else

#end
    /**
     * [get] ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br>
#if ($col.isCommentForJavaDocValid())
     * ${col.commentForJavaDoc}
#end
     * @return The value of the column '${col.name}'. (NullAllowed)
     */
    public ${col.javaNative} get${col.javaName}() {
#if ($col.isEntityConvertEmptyStringToNull())
        return convertEmptyToNull(_${col.uncapitalisedJavaName});
#else
        return _${col.uncapitalisedJavaName};
#end
    }

    /**
     * [set] ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br>
#if ($col.isCommentForJavaDocValid())
     * ${col.commentForJavaDoc}
#end
     * @param ${col.uncapitalisedJavaName} The value of the column '${col.name}'. (NullAllowed)
     */
    ${col.propertySettingModifier} void set${col.javaName}(${col.javaNative} ${col.uncapitalisedJavaName}) {
        this._${col.uncapitalisedJavaName} = ${col.uncapitalisedJavaName};
    }
#end
#if ($table.hasEntityConvertEmptyStringToNull())

    protected String convertEmptyToNull(String value) {
        return "".equals(value) ? null : value;
    }
#end
#set ($propertyLoopIndex = $propertyLoopIndex + 1)
#end
}
