##
## Copyright 2004-2014 the Seasar Foundation and the Others.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${database.allClassCopyright}package ${glPackageBaseCommon};

import java.util.*;

import org.seasar.dbflute.jdbc.Classification;
import org.seasar.dbflute.jdbc.ClassificationCodeType;
import org.seasar.dbflute.jdbc.ClassificationMeta;
import org.seasar.dbflute.jdbc.ClassificationUndefinedHandlingType;

/**
 * The definition of classification.
 * @author ${database.classAuthor}
 */
public interface ${glCDef} extends Classification {

    /** The empty array for no sisters. */
    String[] EMPTY_SISTERS = new String[]{};

    /** The empty map for no sub-items. */
    @SuppressWarnings("unchecked")
    Map<String, Object> EMPTY_SUB_ITEM_MAP = (Map<String, Object>)Collections.EMPTY_MAP;

#foreach ($classificationName in $database.classificationNameList)
#set ($classificationTop = $database.getClassificationTop($classificationName))
#if ($classificationTop.hasTopComment())
    /**
     * ${classificationTop.topCommentForJavaDoc}
     */
#end
#if ($classificationTop.isDeprecated())
    @Deprecated
#end
    public enum ${classificationName} implements ${glCDef} {
#set ($count = 0)
#foreach ($classificationElement in $classificationTop.classificationElementList)
#if ($count != 0)
        ,
#end
        /** $database.buildClassificationApplicationCommentForJavaDoc($classificationElement) */
#if ($classificationElement.isDeprecated())
        @Deprecated
#end
        ${classificationElement.name}($database.buildClassificationCodeAliasSisterCodeVariables($classificationElement))
#set ($count = $count + 1)
#end
        ;
        private static final Map<String, ${classificationName}> _codeValueMap = new HashMap<String, ${classificationName}>();
        static {
            for (${classificationName} value : values()) {
                _codeValueMap.put(value.code().toLowerCase(), value);
                for (String sister : value.sisters()) { _codeValueMap.put(sister.toLowerCase(), value); }
            }
        }
#if ($database.hasClassificationSubItemMap($classificationName))
        private static final Map<String, Map<String, Object>> _subItemMapMap = new HashMap<String, Map<String, Object>>();
        static {
#foreach ($classificationElement in $classificationTop.classificationElementList)
#set ($subItemMap = $classificationElement.subItemMap)
            {
                Map<String, Object> subItemMap = new HashMap<String, Object>();
#foreach ($entry in $subItemMap.entrySet())
#if ($entry.value != "null")
                subItemMap.put("${entry.key}", "${entry.value}");
#else
                subItemMap.put("${entry.key}", null);
#end
#end
                _subItemMapMap.put(${classificationElement.name}.code(), Collections.unmodifiableMap(subItemMap));
            }
#end
        }
#end
        private String _code; private String _alias; private String[] _sisters;
        private ${classificationName}(String code, String alias, String[] sisters)
        { _code = code; _alias = alias; _sisters = sisters; }
        public String code() { return _code; } public String alias() { return _alias; }
        private String[] sisters() { return _sisters; }
#if ($database.hasClassificationSubItemMap($classificationName))
        public Map<String, Object> subItemMap() { return _subItemMapMap.get(code()); }
#else
        public Map<String, Object> subItemMap() { return EMPTY_SUB_ITEM_MAP; }
#end
        public ClassificationMeta meta() { return ${glCDef}.DefMeta.${classificationName}; }

#foreach ($regularSubItem in $classificationTop.regularSubItemList)
#set ($subItemMap = $classificationElement.subItemMap)
#set ($subItemType = "Object")
#if ($regularSubItem.isSubItemTypeString())
#set ($subItemType = "String")
#end
        public ${subItemType} ${regularSubItem.subItemName}() {
#if ($regularSubItem.isSubItemTypeObject())
            return subItemMap().get("${regularSubItem.subItemName}");
#else
            return (${subItemType})subItemMap().get("${regularSubItem.subItemName}");
#end
        }

#end
#foreach ($group in $classificationTop.groupList)
        /**
         * Is the classification in the group? <br>
#if ($group.hasGroupComment())
         * ${group.groupCommentForJavaDocNest} <br>
#end
         * ${group.buildElementDisp()}
         * @return The determination, true or false.
         */
        public boolean is${group.groupNameInitCap}() {
            return ${group.buildReturnExpThis()};
        }

#end
        public boolean inGroup(String groupName) {
#foreach ($group in $classificationTop.groupList)
            if ("${group.groupName}".equals(groupName)) { return is${group.groupNameInitCap}(); }
#end
            return false;
        }

        /**
         * Get the classification by the code. (CaseInsensitive)
         * @param code The value of code, which is case-insensitive. (NullAllowed: if null, returns null)
         * @return The instance of the corresponding classification to the code. (NullAllowed: if not found, returns null)
         */
        public static ${classificationName} codeOf(Object code) {
            if (code == null) { return null; }
            if (code instanceof ${classificationName}) { return (${classificationName})code; }
            return _codeValueMap.get(code.toString().toLowerCase());
        }

        /**
         * Get the classification by the name (also called 'value' in ENUM world).
         * @param name The string of name, which is case-sensitive. (NullAllowed: if null, returns null)
         * @return The instance of the corresponding classification to the name. (NullAllowed: if not found, returns null)
         */
        public static ${classificationName} nameOf(String name) {
            if (name == null) { return null; }
            try { return valueOf(name); } catch (RuntimeException ignored) { return null; }
        }

        /**
         * Get the list of all classification elements. (returns new copied list)
         * @return The list of all classification elements. (NotNull)
         */
        public static List<${classificationName}> listAll() {
            return new ArrayList<${classificationName}>(Arrays.asList(values()));
        }
#foreach ($group in $classificationTop.groupList)

        /**
         * Get the list of group classification elements. (returns new copied list) <br>
#if ($group.hasGroupComment())
         * ${group.groupCommentForJavaDocNest} <br>
#end
         * ${group.buildElementDisp()}
         * @return The list of classification elements in the group. (NotNull)
         */
        public static List<${classificationName}> listOf${group.groupNameInitCap}() {
            return new ArrayList<${classificationName}>(Arrays.asList(${group.buildCDefArgExp()}));
        }
#end

        /**
         * Get the list of classification elements in the specified group. (returns new copied list) <br>
         * @param groupName The string of group name, which is case-sensitive. (NullAllowed: if null, returns empty list)
         * @return The list of classification elements in the group. (NotNull)
         */
        public static List<${classificationName}> groupOf(String groupName) {
#foreach ($group in $classificationTop.groupList)
            if ("${group.groupName}".equals(groupName)) { return listOf${group.groupNameInitCap}(); }
#end
            return new ArrayList<${classificationName}>(4);
        }

#if ($database.isCDefToStringReturnsName())
        @Override public String toString() { return name(); }
#else
        @Override public String toString() { return code(); }
#end
    }

#end
    public enum DefMeta implements ClassificationMeta {
#set ($count = 0)
#foreach ($classificationName in $database.classificationNameList)
#set ($classificationTop = $database.getClassificationTop($classificationName))
#if ($count != 0)
        ,
#end
#if ($classificationTop.hasTopComment())
        /** ${classificationTop.topCommentForJavaDocNest} */
#end
        ${classificationName}
#set ($count = $count + 1)
#end
        ;
        public String classificationName() {
            return name(); // same as definition name
        }

        public Classification codeOf(Object code) {
#foreach ($classificationName in $database.classificationNameList)
            if ("${classificationName}".equals(name())) { return ${glCDef}.${classificationName}.codeOf(code); }
#end
            throw new IllegalStateException("Unknown definition: " + this); // basically unreachable
        }

        public Classification nameOf(String name) {
#foreach ($classificationName in $database.classificationNameList)
            if ("${classificationName}".equals(name())) { return ${glCDef}.${classificationName}.valueOf(name); }
#end
            throw new IllegalStateException("Unknown definition: " + this); // basically unreachable
        }

        public List<Classification> listAll() {
#foreach ($classificationName in $database.classificationNameList)
            if ("${classificationName}".equals(name())) { return toClassificationList(${glCDef}.${classificationName}.listAll()); }
#end
            throw new IllegalStateException("Unknown definition: " + this); // basically unreachable
        }

        public List<Classification> groupOf(String groupName) {
#foreach ($classificationName in $database.classificationNameList)
            if ("${classificationName}".equals(name())) { return toClassificationList(${glCDef}.${classificationName}.groupOf(groupName)); }
#end
            throw new IllegalStateException("Unknown definition: " + this); // basically unreachable
        }

        @SuppressWarnings("unchecked")
        private List<Classification> toClassificationList(List<?> clsList) {
            return (List<Classification>)clsList;
        }

        public ClassificationCodeType codeType() {
#foreach ($classificationName in $database.classificationNameList)
#set ($classificationTop = $database.getClassificationTop($classificationName))
#if ($classificationTop.hasCodeType())
            if ("${classificationName}".equals(name())) { return ClassificationCodeType.${classificationTop.codeType}; }
#end
#end
            return ClassificationCodeType.String; // as default
        }

        public ClassificationUndefinedHandlingType undefinedHandlingType() {
#foreach ($classificationName in $database.classificationNameList)
#set ($classificationTop = $database.getClassificationTop($classificationName))
            if ("${classificationName}".equals(name())) { return ClassificationUndefinedHandlingType.${classificationTop.undefinedHandlingType}; }
#end
            return ClassificationUndefinedHandlingType.LOGGING; // as default
        }
    }
}
